<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C4DDev</title>
    <link>https://niklasrosenstein.github.io/c4ddev/</link>
    <description>Recent content on C4DDev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    
	<atom:link href="https://niklasrosenstein.github.io/c4ddev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C4DDev</title>
      <link>https://niklasrosenstein.github.io/c4ddev/home/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niklasrosenstein.github.io/c4ddev/home/</guid>
      <description>The C4DDev project is a suite of tools and resources for Cinema 4D plugin developers. It aims to provide tools for rapid plugin prototyping, development, distribution and maintenance. These tools come in various forms:
 Cinema 4D Plugins Command-line Tools Py4D API Extensions How-To&amp;rsquo;s and Guidelines  Check out Getting Started for how to get started with C4DDev and Cinema 4D plugin development.
License The MIT License (MIT) Copyright (c) 2014 Niklas Rosenstein Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &amp;quot;Software&amp;quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</description>
    </item>
    
    <item>
      <title>C4DTools</title>
      <link>https://niklasrosenstein.github.io/c4ddev/c4dtools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niklasrosenstein.github.io/c4ddev/c4dtools/</guid>
      <description>The C4DTools is a Python library that can be used by other plugins that use the Node.Py runtime. To use C4DTools from a Python plugin, you have to install C4DDev locally with nodepy-pm.
$ nodepy-pm instal c4ddev --save $ ls nodepy_modules/ c4ddev  Then you can require the desired components of C4DTools in your plugin.
aabb = require(&#39;c4ddev/lib/c4dtools/misc/aabb&#39;) gui = require(&#39;c4ddev/lib/c4dtools/gui&#39;) c4dmath = require(&#39;c4ddev/lib/c4dtools/math&#39;)  Note that from the C4D Script Manager, Python Objects, Tags and Nodes, the path to require the library components is different:</description>
    </item>
    
    <item>
      <title>Changelog</title>
      <link>https://niklasrosenstein.github.io/c4ddev/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niklasrosenstein.github.io/c4ddev/changelog/</guid>
      <description>v0.1.6 (development)  add c4ddev pluginid command fix c4ddev build-loader command and add --blob,--no-blob options move c4ddev.handlemousedrag() to c4ddev.HandleMouseDrag() rename c4ddev.fileselect_~() to c4ddev.FileSelect~() rename c4ddev.cast_node() to c4ddev.GeListNodeFromAddress() add c4ddev.GetUserAreaHandle() add c4ddev.GetClipMapHandle() add c4ddev.BlitClipMap() add c4ddev.am module  v0.1.5  merge https://github.com/NiklasRosenstein/c4d-apex into C4DDev and rename everything from c4d.apex to c4ddev merge https://github.com/NiklasRosenstein/py-c4dtools into C4DDev merge https://github.com/NiklasRosenstein/c4d-sublime-script into C4DDev Rename SublimeScript to Scripting Server The Scripting Server must be enabled explicitly from the C4DDev plugin menu  v0.</description>
    </item>
    
    <item>
      <title>Command-line Tools</title>
      <link>https://niklasrosenstein.github.io/c4ddev/cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niklasrosenstein.github.io/c4ddev/cli/</guid>
      <description>Installation To install the command-line tools, you need Node.Py.
$ pip install node.py $ nodepy-pm install --global c4ddev  (Note: You can also install the command-line tools locally for your project by omitting the --global option and adding nodepy_modules/.bin to your PATH)
c4ddev Usage: c4ddev [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Commands: build-loader Generate a Cinema 4D Python plugin that uses... get-pip Installs Pip into the Cinema 4D Python.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://niklasrosenstein.github.io/c4ddev/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niklasrosenstein.github.io/c4ddev/getting-started/</guid>
      <description>Installing C4DDev There are multiple components of C4DDev can be installed separately. To install the Cinema 4D plugins, you should go to the GitHub Releases page and download the appropriate release for your Cinema 4D version and platform. This download will contain the full C4DDev Python and prebuilt binaries of the C++ components.
You install the C4DDev plugin the same as you would do with any other plugin. Simply extract the archive into the Cinema 4D plugins directory.</description>
    </item>
    
    <item>
      <title>Plugins</title>
      <link>https://niklasrosenstein.github.io/c4ddev/plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niklasrosenstein.github.io/c4ddev/plugins/</guid>
      <description>C4D IDE Also a very old plugin that is not very progressed and also currently provides two different approaches to implementing a Python IDE in Cinema 4D.
PyObject An alternative to the Cinema 4D standard Python Generator object that allows you to implement a number of other ObjectData methods.
PyShader This simple Cinema 4D plugin allows you to write shaders on-the-fly or prototype for a native shader plugin.
Unicode Escape Tool String resources require special characters to be escaped with unicode escape sequences in the format of \UXXXX.</description>
    </item>
    
    <item>
      <title>Py4D API Extensions</title>
      <link>https://niklasrosenstein.github.io/c4ddev/apiext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niklasrosenstein.github.io/c4ddev/apiext/</guid>
      <description>The C4DDev Py4D API Extensions are a C++ plugin that provide additional functions that can be used from Python.
Note
The C++ component of C4DDev must be installed, otherwise the API extensions will not be available. Pre-compiled binaries are available in the GitHub Releases of C4DDev.
 Members c4ddev.__version__ The installed version of C4DDev.
c4ddev.has_cpp_extensions True if the C4DDev C++ extensions are installed, otherwise False. Note that if the C++ extensions are not installed and you try to import c4ddev from a Cinema 4D plugin, importing c4ddev could fail if your plugin is executed before the C4DDev Python entrypoint.</description>
    </item>
    
    <item>
      <title>Py4D Imports: How-To</title>
      <link>https://niklasrosenstein.github.io/c4ddev/py4d-imports-howto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niklasrosenstein.github.io/c4ddev/py4d-imports-howto/</guid>
      <description>When using and distributing third-party modules in a Cinema 4D Python plugin, many problems can arise when used incorrectly. Some users have hundreds of Cinema 4D plugins, and many of them use third-party modules. Some plugins will stop working when another plugin delivers the same third-party module in a different version or even one with the same name but completely different functionality!
When you import modules from your Python Plugin&amp;rsquo;s directory, you should never do it the naive way, unless you EXPLICITLY WANT these third-party modules to be accessible from the outside (eg.</description>
    </item>
    
    <item>
      <title>Python &amp; C&#43;&#43; Resources</title>
      <link>https://niklasrosenstein.github.io/c4ddev/resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niklasrosenstein.github.io/c4ddev/resources/</guid>
      <description>Python Snippets  TreeViewCustomGui Example copy_preset_texture()  Scripts  Cinema 4D Plugin Skeleton &amp;ndash; Skeleton to kick off Cinema 4D Python plugins from. Set as Startup Scene &amp;ndash; Script to set the current scene as the startup scene.  C++ This page contains a list of resources about Cinema 4D C++ plugin development and useful links.
Posts  Drawing Text in the Viewport Saving EXR Exposing C++ functionality to Python Viewport HUD API Saving Custom GUI layouts  Tools  craftr:NiklasRosenstein.</description>
    </item>
    
    <item>
      <title>Resource Packages</title>
      <link>https://niklasrosenstein.github.io/c4ddev/resource-packages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niklasrosenstein.github.io/c4ddev/resource-packages/</guid>
      <description>Resource packages allow you to more efficiently manage plugin resource files and translations by merging all information into a single file. Resource packages have the .rpkg suffix and are converted to real Cinema 4D resource files by using the c4ddev rpkg command.
Example # Must be the first statement in a .rpkg file. The (XXX) part is optional. ResourcePackage(Ocube) # It is common to assign the actual Plugin ID already in the description # resource header file, so people can just include the header and also have # the plugin ID available.</description>
    </item>
    
    <item>
      <title>Scripting</title>
      <link>https://niklasrosenstein.github.io/c4ddev/scripting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niklasrosenstein.github.io/c4ddev/scripting/</guid>
      <description>The C4DDev API provides some utilities that are especially useful for scripting and prototyping in Cinema 4D.
Per-Project libraries This is extremely useful when using third party libraries in scripts or Python Objects/Tags. You can keep the dependencies together with your Cinema 4D scene file and only make sure that C4DDev is installed if you move the scene around.
from c4ddev import require localimport = require(&#39;c4ddev/scripting/localimport&#39;) # This is a version of localimport that is tuned to work from inside any # scripting context in Cinema 4D (Tag, Object, XPresso Node).</description>
    </item>
    
  </channel>
</rss>