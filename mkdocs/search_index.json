{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to the c4ddev Documentation!\n\n\nThe \nc4ddev\n project is a set of Cinema 4D plugins, command-line tools and\nutilities for scripting inside of Cinema 4D that aims to make the prototyping,\ndevelopment and distribution of Cinema 4D plugins easier.\n\n\nLicense\n\n\nThe MIT License (MIT)\n\nCopyright (c) 2014  Niklas Rosenstein\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-the-c4ddev-documentation",
            "text": "The  c4ddev  project is a set of Cinema 4D plugins, command-line tools and\nutilities for scripting inside of Cinema 4D that aims to make the prototyping,\ndevelopment and distribution of Cinema 4D plugins easier.",
            "title": "Welcome to the c4ddev Documentation!"
        },
        {
            "location": "/#license",
            "text": "The MIT License (MIT)\n\nCopyright (c) 2014  Niklas Rosenstein\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
            "title": "License"
        },
        {
            "location": "/changelog/",
            "text": "c4ddev Changelog\n\n\nv1.3 (under development)\n\n\n\n\nrewrite PyDrawHelper code (cb5aa58)\n\n\nfix reloading of c4ddev plugins by reloading the \nrequire\n module (7f61b5b)\n\n\nadd option to install \nc4ddev\n command-line interface\n\n\nadd \nc4ddev pypkg\n command\n\n\n\n\nv1.2\n\n\n\n\nupdate \nrequire\n module to v0.10\n\n\nmerge PyDrawHelper plugin\n\n\nmerge \nPyShader\n plugin\n\n\n\n\nv1.1\n\n\n\n\nadd \n.pubfile\n for \ngit-publish\n\n\nadd \nlocalimport\n v1.4.16 module\n\n\nadd \nrequire\n v0.8 module\n\n\nadd \nrequests\n v2.10.0 module\n\n\nrestructure c4ddev plugins to be loaded with \nrequire()\n\n\nrestructure \nc4ddev\n modules to be loaded with \nrequire()",
            "title": "Changelog"
        },
        {
            "location": "/changelog/#c4ddev-changelog",
            "text": "",
            "title": "c4ddev Changelog"
        },
        {
            "location": "/changelog/#v13-under-development",
            "text": "rewrite PyDrawHelper code (cb5aa58)  fix reloading of c4ddev plugins by reloading the  require  module (7f61b5b)  add option to install  c4ddev  command-line interface  add  c4ddev pypkg  command",
            "title": "v1.3 (under development)"
        },
        {
            "location": "/changelog/#v12",
            "text": "update  require  module to v0.10  merge PyDrawHelper plugin  merge  PyShader  plugin",
            "title": "v1.2"
        },
        {
            "location": "/changelog/#v11",
            "text": "add  .pubfile  for  git-publish  add  localimport  v1.4.16 module  add  require  v0.8 module  add  requests  v2.10.0 module  restructure c4ddev plugins to be loaded with  require()  restructure  c4ddev  modules to be loaded with  require()",
            "title": "v1.1"
        },
        {
            "location": "/cli/",
            "text": "Command-line Tools\n\n\nc4ddev\n comes with a set of command-line tools that can be installed via Pip.\n\n\n$ pip install c4ddev\n$ c4ddev --help\nUsage: c4ddev [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  pypkg    Reads a JSON configuration file, by default...\n  rpkg\n    symbols\n\n\n\n\nCommands\n\n\npypkg\n\n\nc4ddev pypkg [CONFIG]\n\n\n\n\nThe \npypkg\n command compiles Python modules and packages into \n.pyc\n files\nand merges them into a Python Egg archive or directory. This is useful to\nprotect your Python code and to distribute your Python plugin.\n\n\n\n\nNote\n\n\nKeep in mind that you should always use \nlocalimport\n\nto import any third-party Python modules from a Cinema 4D plugin in\norder to keep the global importer state clean.\n\n\n\n\nExample Configuration\n (\n.pypkg\n)\n\n\nThis is a real-world example configuration file.\n\n\n{\n  \"output\": \"res/modules/cloudui-{target}.egg\",\n  \"include\": [\n    \"devel/res.py\",\n    \"../vendor/python/nr/nr\",\n    \"../vendor/python/cloudui/cloudui\"\n  ]\n}\n\n\n\n\nrpkg\n\n\nsymbols\n\n\nc4ddev symbols [-f,--format] [-o,--outfile] [-d,--res-dir]\n\n\n\n\nExtracts the resource symbols from all header files in \nres/\n directory or the\ndirectory/ies specified via \n-d,--res-dir\n and formats them as a Python class,\nPython file or JSON.\n\n\n$ pwd\n/Users/niklas/Applications/Cinema 4D R18/plugins/myplugin\n$ c4ddev symbols\n\nexec (\"\"\"class res(object):\n # Automatically generated with c4ddev v1.3.\n project_path = os.path.dirname(__file__)\n def string(self, name, *subst):\n  result = __res__.LoadString(getattr(self, name))\n  for item in subst: result = result.replace('#', item, 1)\n  return result\n def tup(self, name, *subst):\n  return (getattr(self, name), self.string(name, *subst))\n def path(self, *parts):\n  path = os.path.join(*parts)\n  if not os.path.isabs(path):\n   path = os.path.join(self.project_path, path)\n  return path\n file = path  # backwards compatibility\n def bitmap(self, *parts):\n  b = c4d.bitmaps.BaseBitmap()\n  if b.InitWith(self.path(*parts))[0] != c4d.IMAGERESULT_OK: return None\n  return b\n MYSYMBOL = 1000\n MYOTHERSYMBOLS = 1001\n res=res()\"\"\")\n\n\n\n\nAvailable Formats\n\n\n\n\nPython class (\nclass\n) [default] -- Can be copied into the Python plugin source\n\n\nPython file (\nfile\n)  -- Can be loaded as a module (make use of \nlocalimport\n)\n\n\nJSON (\njson\n) -- Can be loaded using the \njson\n module",
            "title": "Command-line Tools"
        },
        {
            "location": "/cli/#command-line-tools",
            "text": "c4ddev  comes with a set of command-line tools that can be installed via Pip.  $ pip install c4ddev\n$ c4ddev --help\nUsage: c4ddev [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  pypkg    Reads a JSON configuration file, by default...\n  rpkg\n    symbols",
            "title": "Command-line Tools"
        },
        {
            "location": "/cli/#commands",
            "text": "",
            "title": "Commands"
        },
        {
            "location": "/cli/#pypkg",
            "text": "c4ddev pypkg [CONFIG]  The  pypkg  command compiles Python modules and packages into  .pyc  files\nand merges them into a Python Egg archive or directory. This is useful to\nprotect your Python code and to distribute your Python plugin.   Note  Keep in mind that you should always use  localimport \nto import any third-party Python modules from a Cinema 4D plugin in\norder to keep the global importer state clean.   Example Configuration  ( .pypkg )  This is a real-world example configuration file.  {\n  \"output\": \"res/modules/cloudui-{target}.egg\",\n  \"include\": [\n    \"devel/res.py\",\n    \"../vendor/python/nr/nr\",\n    \"../vendor/python/cloudui/cloudui\"\n  ]\n}",
            "title": "pypkg"
        },
        {
            "location": "/cli/#rpkg",
            "text": "",
            "title": "rpkg"
        },
        {
            "location": "/cli/#symbols",
            "text": "c4ddev symbols [-f,--format] [-o,--outfile] [-d,--res-dir]  Extracts the resource symbols from all header files in  res/  directory or the\ndirectory/ies specified via  -d,--res-dir  and formats them as a Python class,\nPython file or JSON.  $ pwd\n/Users/niklas/Applications/Cinema 4D R18/plugins/myplugin\n$ c4ddev symbols\n\nexec (\"\"\"class res(object):\n # Automatically generated with c4ddev v1.3.\n project_path = os.path.dirname(__file__)\n def string(self, name, *subst):\n  result = __res__.LoadString(getattr(self, name))\n  for item in subst: result = result.replace('#', item, 1)\n  return result\n def tup(self, name, *subst):\n  return (getattr(self, name), self.string(name, *subst))\n def path(self, *parts):\n  path = os.path.join(*parts)\n  if not os.path.isabs(path):\n   path = os.path.join(self.project_path, path)\n  return path\n file = path  # backwards compatibility\n def bitmap(self, *parts):\n  b = c4d.bitmaps.BaseBitmap()\n  if b.InitWith(self.path(*parts))[0] != c4d.IMAGERESULT_OK: return None\n  return b\n MYSYMBOL = 1000\n MYOTHERSYMBOLS = 1001\n res=res()\"\"\")  Available Formats   Python class ( class ) [default] -- Can be copied into the Python plugin source  Python file ( file )  -- Can be loaded as a module (make use of  localimport )  JSON ( json ) -- Can be loaded using the  json  module",
            "title": "symbols"
        },
        {
            "location": "/localimport/",
            "text": "Localimport\n\n\nThis is not directly a feature of \nc4ddev\n, but it is something that needs to\nbe considered by every Python Plugin author. When you import modules from your\nPython Plugin's directory, you should \nnever\n do it the naive way (exceptions\napply*)!\n\n\nimport os, sys\nsys.path.append(os.path.join(os.path.dirname(__file__), 'lib'))\nimport some_module\n\n\n\n\n\n\nDanger\n\n\nUsing the naive approach shown above is dangerous and can lead to\nincompatibilties between plugins.\n\n\n\n\nInstead, it is highly recommended to make sure that the global importer state\nstays clean and unaware of your additional modules. While you could code that\nall yourself, someone already racked their brain over this. The\n\nlocalimport\n module provides a context-manager that allows you to safely\nimport modules from a directory, automatically cleaning up afterwards and\nreverting the global Python data (\nsys.modules\n, \nsys.path\n, etc.) to its\noriginal state.\n\n\nwith localimport(['lib']) as _importer:\n  # This line would not be necessary if everyone would use localimport,\n  # but since we can not garuantee that...\n  _importer.disable(['some_module'])\n\n  import some_module\n  assert 'some_module' in sys.modules\n\nassert 'some_module' not in sys.modules\n\n\n\n\nMinified Version\n\n\nNow of course, \nlocalimport\n is, in itself, also a Python module. Instead\nof actually loading the class from a Python module, it is recommended to include\nthe actual source code at the top of your Python plugin. Below is a minified\nversion of \nlocalimport-v1.5\n. Other (and eventually newer) versions are\navailable \nhere\n.\n\n\n# localimport-v1.5_b64_lw=99\nexec(\"\"\"import base64 as b, zlib as z; s={}; blob=b\"\\\n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\"\nexec(z.decompress(b.b64decode(blob)), s)\nlocalimport=s[\"localimport\"]; del blob, b, z, s;\"\"\")\n\n\n\n\nExceptions\n\n\nIf your Python Plugin provides a unique API that is intended to be exposed to\nother plugins or scripts, it is a valid method of adding that module to the\nglobal \nsys.path\n.\n\n\nFor example, the \nPV Render Queue\n plugin does exactly that.\n\n\nExtended Example\n\n\nIf you're using \nc4ddev pypkg\n to package additional Python\nmodules, it is common to have a \ndevel/\n directory with all the dependencies.\nIn development mode, you can make \nlocalimport\n load the dependencies from\nthat directory, and otherwise load it from the Python Egg generated with\n\nc4ddev pypkg\n.\n\n\nif _debug:\n  _importer = localimport(['devel'])\nelse:\n  _importer = localimport('res/modules' + sys.version[:3])\n\nwith _importer:\n    _importer.disable(['res', 'c4dtools', 'cloudui', 'res', 'nr'])\n\n    import res\n    import c4dtools\n    import cloudui\n    import nr.concurrency\n\n    from c4dtools.gui import handle_file_select\n    from c4dtools.utils import load_bitmap\n    from cloudui.utils import (\n        get_frame_range, check_region, iter_rdata, calc_tile_size,\n        fit_tile_count, Point\n    )\n\n\n\n\nNote that in most cases, the \ndevel/\n directory will not contain just the\nsource code of the modules that you want to use, but the complete repository\n(eg. when you're using Git submodules, which I highly recommend).\n\n\ndevel/\n  requests/\n    requests/\n    README.md\n    setup.py\n    ...\n\n\n\n\nIn order to have the correct \nsys.path\n setup when loading modules from the\n\ndevel/\n directory, you can place a \n.pth\n file into that directory.\n\n\ndevel/\n  devel.pth       <<\n  requests/\n    requests/\n    README.md\n    setup.py\n  ...\n\n\n\n\nThis file can list an additional include directory per line. So for the above\nexample, in order to be able to import the \nrequests\n module in development mode,\nwe simply add the following line to the \ndevel.pth\n file.\n\n\nrequests/requests\n\n\n\n\n\n\nNote\n\n\nYou don't need this file in release mode when your third-party modules\nare packaged with \nc4ddev pypkg\n.",
            "title": "Localimport"
        },
        {
            "location": "/localimport/#localimport",
            "text": "This is not directly a feature of  c4ddev , but it is something that needs to\nbe considered by every Python Plugin author. When you import modules from your\nPython Plugin's directory, you should  never  do it the naive way (exceptions\napply*)!  import os, sys\nsys.path.append(os.path.join(os.path.dirname(__file__), 'lib'))\nimport some_module   Danger  Using the naive approach shown above is dangerous and can lead to\nincompatibilties between plugins.   Instead, it is highly recommended to make sure that the global importer state\nstays clean and unaware of your additional modules. While you could code that\nall yourself, someone already racked their brain over this. The localimport  module provides a context-manager that allows you to safely\nimport modules from a directory, automatically cleaning up afterwards and\nreverting the global Python data ( sys.modules ,  sys.path , etc.) to its\noriginal state.  with localimport(['lib']) as _importer:\n  # This line would not be necessary if everyone would use localimport,\n  # but since we can not garuantee that...\n  _importer.disable(['some_module'])\n\n  import some_module\n  assert 'some_module' in sys.modules\n\nassert 'some_module' not in sys.modules",
            "title": "Localimport"
        },
        {
            "location": "/localimport/#minified-version",
            "text": "Now of course,  localimport  is, in itself, also a Python module. Instead\nof actually loading the class from a Python module, it is recommended to include\nthe actual source code at the top of your Python plugin. Below is a minified\nversion of  localimport-v1.5 . Other (and eventually newer) versions are\navailable  here .  # localimport-v1.5_b64_lw=99\nexec(\"\"\"import base64 as b, zlib as z; s={}; blob=b\"\\\n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\"\nexec(z.decompress(b.b64decode(blob)), s)\nlocalimport=s[\"localimport\"]; del blob, b, z, s;\"\"\")",
            "title": "Minified Version"
        },
        {
            "location": "/localimport/#exceptions",
            "text": "If your Python Plugin provides a unique API that is intended to be exposed to\nother plugins or scripts, it is a valid method of adding that module to the\nglobal  sys.path .  For example, the  PV Render Queue  plugin does exactly that.",
            "title": "Exceptions"
        },
        {
            "location": "/localimport/#extended-example",
            "text": "If you're using  c4ddev pypkg  to package additional Python\nmodules, it is common to have a  devel/  directory with all the dependencies.\nIn development mode, you can make  localimport  load the dependencies from\nthat directory, and otherwise load it from the Python Egg generated with c4ddev pypkg .  if _debug:\n  _importer = localimport(['devel'])\nelse:\n  _importer = localimport('res/modules' + sys.version[:3])\n\nwith _importer:\n    _importer.disable(['res', 'c4dtools', 'cloudui', 'res', 'nr'])\n\n    import res\n    import c4dtools\n    import cloudui\n    import nr.concurrency\n\n    from c4dtools.gui import handle_file_select\n    from c4dtools.utils import load_bitmap\n    from cloudui.utils import (\n        get_frame_range, check_region, iter_rdata, calc_tile_size,\n        fit_tile_count, Point\n    )  Note that in most cases, the  devel/  directory will not contain just the\nsource code of the modules that you want to use, but the complete repository\n(eg. when you're using Git submodules, which I highly recommend).  devel/\n  requests/\n    requests/\n    README.md\n    setup.py\n    ...  In order to have the correct  sys.path  setup when loading modules from the devel/  directory, you can place a  .pth  file into that directory.  devel/\n  devel.pth       <<\n  requests/\n    requests/\n    README.md\n    setup.py\n  ...  This file can list an additional include directory per line. So for the above\nexample, in order to be able to import the  requests  module in development mode,\nwe simply add the following line to the  devel.pth  file.  requests/requests   Note  You don't need this file in release mode when your third-party modules\nare packaged with  c4ddev pypkg .",
            "title": "Extended Example"
        }
    ]
}