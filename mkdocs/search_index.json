{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to the c4ddev Documentation!\n\n\nThe \nc4ddev\n project is a set of Cinema 4D plugins, command-line tools and\nutilities for scripting inside of Cinema 4D that aims to make the prototyping,\ndevelopment and distribution of Cinema 4D plugins easier.\n\n\nLicense\n\n\nThe MIT License (MIT)\n\nCopyright (c) 2014  Niklas Rosenstein\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-the-c4ddev-documentation",
            "text": "The  c4ddev  project is a set of Cinema 4D plugins, command-line tools and\nutilities for scripting inside of Cinema 4D that aims to make the prototyping,\ndevelopment and distribution of Cinema 4D plugins easier.",
            "title": "Welcome to the c4ddev Documentation!"
        },
        {
            "location": "/#license",
            "text": "The MIT License (MIT)\n\nCopyright (c) 2014  Niklas Rosenstein\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
            "title": "License"
        },
        {
            "location": "/changelog/",
            "text": "c4ddev Changelog\n\n\nv1.3 (under development)\n\n\n\n\nrewrite PyDrawHelper code (cb5aa58)\n\n\nfix reloading of c4ddev plugins by reloading the \nrequire\n module (7f61b5b)\n\n\nadd option to install \nc4ddev\n command-line interface\n\n\nadd \nc4ddev pypkg\n command\n\n\n\n\nv1.2\n\n\n\n\nupdate \nrequire\n module to v0.10\n\n\nmerge PyDrawHelper plugin\n\n\nmerge \nPyShader\n plugin\n\n\n\n\nv1.1\n\n\n\n\nadd \n.pubfile\n for \ngit-publish\n\n\nadd \nlocalimport\n v1.4.16 module\n\n\nadd \nrequire\n v0.8 module\n\n\nadd \nrequests\n v2.10.0 module\n\n\nrestructure c4ddev plugins to be loaded with \nrequire()\n\n\nrestructure \nc4ddev\n modules to be loaded with \nrequire()",
            "title": "Changelog"
        },
        {
            "location": "/changelog/#c4ddev-changelog",
            "text": "",
            "title": "c4ddev Changelog"
        },
        {
            "location": "/changelog/#v13-under-development",
            "text": "rewrite PyDrawHelper code (cb5aa58)  fix reloading of c4ddev plugins by reloading the  require  module (7f61b5b)  add option to install  c4ddev  command-line interface  add  c4ddev pypkg  command",
            "title": "v1.3 (under development)"
        },
        {
            "location": "/changelog/#v12",
            "text": "update  require  module to v0.10  merge PyDrawHelper plugin  merge  PyShader  plugin",
            "title": "v1.2"
        },
        {
            "location": "/changelog/#v11",
            "text": "add  .pubfile  for  git-publish  add  localimport  v1.4.16 module  add  require  v0.8 module  add  requests  v2.10.0 module  restructure c4ddev plugins to be loaded with  require()  restructure  c4ddev  modules to be loaded with  require()",
            "title": "v1.1"
        },
        {
            "location": "/cli/",
            "text": "Command-line Tools\n\n\nc4ddev\n comes with a set of command-line tools that can be installed via Pip.\n\n\n$ pip install c4ddev\n$ c4ddev --help\nUsage: c4ddev [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  pypkg    Reads a JSON configuration file, by default...\n  rpkg\n  symbols\n\n\n\n\nCommands\n\n\npypkg\n\n\nc4ddev pypkg [CONFIG]\n\n\n\n\nThe \npypkg\n command compiles Python modules and packages into \n.pyc\n files\nand merges them into a Python Egg archive or directory. This is useful to\nprotect your Python code and to distribute your Python plugin.\n\n\n\n\nNote\n\n\nKeep in mind that you should always use \nlocalimport\n\nto import any third-party Python modules from a Cinema 4D plugin in\norder to keep the global importer state clean.\n\n\n\n\nExample Configuration\n (\n.pypkg\n)\n\n\nThis is a real-world example configuration file.\n\n\n{\n  \"output\": \"res/modules{target}/cloudui.egg\",\n  \"include\": [\n    \"devel/res.py\",\n    \"../vendor/python/c4dtools/c4dtools\",\n    \"../vendor/python/nr/nr\",\n    \"../vendor/python/cloudui/cloudui\"\n  ]\n}\n\n\n\n\nrpkg\n\n\nFor more information, see \nResource Packages\n.\n\n\nsymbols\n\n\nc4ddev symbols [-f,--format] [-o,--outfile] [-d,--res-dir]\n\n\n\n\nExtracts the resource symbols from all header files in \nres/\n directory or the\ndirectory/ies specified via \n-d,--res-dir\n and formats them as a Python class,\nPython file or JSON.\n\n\n$ pwd\n/Users/niklas/Applications/Cinema 4D R18/plugins/myplugin\n$ c4ddev symbols\n\nexec (\"\"\"class res(object):\n # Automatically generated with c4ddev v1.3.\n project_path = os.path.dirname(__file__)\n def string(self, name, *subst):\n  result = __res__.LoadString(getattr(self, name))\n  for item in subst: result = result.replace('#', item, 1)\n  return result\n def tup(self, name, *subst):\n  return (getattr(self, name), self.string(name, *subst))\n def path(self, *parts):\n  path = os.path.join(*parts)\n  if not os.path.isabs(path):\n   path = os.path.join(self.project_path, path)\n  return path\n file = path  # backwards compatibility\n def bitmap(self, *parts):\n  b = c4d.bitmaps.BaseBitmap()\n  if b.InitWith(self.path(*parts))[0] != c4d.IMAGERESULT_OK: return None\n  return b\n MYSYMBOL = 1000\n MYOTHERSYMBOLS = 1001\n res=res()\"\"\")\n\n\n\n\nAvailable Formats\n\n\n\n\nPython class (\nclass\n) [default] \u2013 Can be copied into the Python plugin source\n\n\nPython file (\nfile\n)  \u2013 Can be loaded as a module (make use of \nlocalimport\n)\n\n\nJSON (\njson\n) \u2013 Can be loaded using the \njson\n module",
            "title": "Command-line Tools"
        },
        {
            "location": "/cli/#command-line-tools",
            "text": "c4ddev  comes with a set of command-line tools that can be installed via Pip.  $ pip install c4ddev\n$ c4ddev --help\nUsage: c4ddev [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  pypkg    Reads a JSON configuration file, by default...\n  rpkg\n  symbols",
            "title": "Command-line Tools"
        },
        {
            "location": "/cli/#commands",
            "text": "",
            "title": "Commands"
        },
        {
            "location": "/cli/#pypkg",
            "text": "c4ddev pypkg [CONFIG]  The  pypkg  command compiles Python modules and packages into  .pyc  files\nand merges them into a Python Egg archive or directory. This is useful to\nprotect your Python code and to distribute your Python plugin.   Note  Keep in mind that you should always use  localimport \nto import any third-party Python modules from a Cinema 4D plugin in\norder to keep the global importer state clean.   Example Configuration  ( .pypkg )  This is a real-world example configuration file.  {\n  \"output\": \"res/modules{target}/cloudui.egg\",\n  \"include\": [\n    \"devel/res.py\",\n    \"../vendor/python/c4dtools/c4dtools\",\n    \"../vendor/python/nr/nr\",\n    \"../vendor/python/cloudui/cloudui\"\n  ]\n}",
            "title": "pypkg"
        },
        {
            "location": "/cli/#rpkg",
            "text": "For more information, see  Resource Packages .",
            "title": "rpkg"
        },
        {
            "location": "/cli/#symbols",
            "text": "c4ddev symbols [-f,--format] [-o,--outfile] [-d,--res-dir]  Extracts the resource symbols from all header files in  res/  directory or the\ndirectory/ies specified via  -d,--res-dir  and formats them as a Python class,\nPython file or JSON.  $ pwd\n/Users/niklas/Applications/Cinema 4D R18/plugins/myplugin\n$ c4ddev symbols\n\nexec (\"\"\"class res(object):\n # Automatically generated with c4ddev v1.3.\n project_path = os.path.dirname(__file__)\n def string(self, name, *subst):\n  result = __res__.LoadString(getattr(self, name))\n  for item in subst: result = result.replace('#', item, 1)\n  return result\n def tup(self, name, *subst):\n  return (getattr(self, name), self.string(name, *subst))\n def path(self, *parts):\n  path = os.path.join(*parts)\n  if not os.path.isabs(path):\n   path = os.path.join(self.project_path, path)\n  return path\n file = path  # backwards compatibility\n def bitmap(self, *parts):\n  b = c4d.bitmaps.BaseBitmap()\n  if b.InitWith(self.path(*parts))[0] != c4d.IMAGERESULT_OK: return None\n  return b\n MYSYMBOL = 1000\n MYOTHERSYMBOLS = 1001\n res=res()\"\"\")  Available Formats   Python class ( class ) [default] \u2013 Can be copied into the Python plugin source  Python file ( file )  \u2013 Can be loaded as a module (make use of  localimport )  JSON ( json ) \u2013 Can be loaded using the  json  module",
            "title": "symbols"
        },
        {
            "location": "/rpkg/",
            "text": "Resource Packages\n\n\nResource packages allow you to more efficiently manage plugin resource files\nand translations by merging all information into a single file. Resource\npackages have the \n.rpkg\n suffix and are converted to real Cinema 4D resource\nfiles by using the \nc4ddev rpkg\n command.\n\n\nResourcePackage\n# Basic Attributes\nPRIM_CUBE_LENGTH: 1001\n  us: Size\n  de: Gr\u00f6\u00dfe\nPRIM_CUBE_SEGMENTS: 1002\n  us: Segments\n  de: Segmente\n# A symbol without ID is placed only into the Stringtable\nSOME_SEPARATOR_NAME:\n  us: A Separator\n  de: Ein Separator\n# More symbols to follow ...\n\n\n\n\nA file called \nc4d_symbols.rpkg\n will be handled special and generate the respective\n\nc4d_symbols.h\n and \nc4d_strings.str\n files.\n\n\n$ c4ddev.py rpkg res/c4d_symbols.rpkg res/Ocube.rpkg\nWriting c4d_symbols.h ...\nWriting strings_de/c4d_strings.str ...\nWriting strings_us/c4d_strings.str ...\nWriting description/Ocube.h ...\nWriting strings_de/description/Ocube.str ...\nWriting strings_us/description/Ocube.str ...\n\n\n\n\n.rpkg\n Format Information\n\n\n\n\nThe \nResourcePackage\n line is mandatory and must be the first line in the file\n\n\nComments begin with a number sign (\n#\n) and continue until the end of the line\n\n\nAssigning a fixed ID number to a symbol is mandatory\n\n\nSpecial characters in the localization are allowed (use \n\\n\n for a newline and \n\\t\n for a tab)\n\n\nIf the file is named \nc4d_symbols.rpkg\n, it will automatically be created in the res folder\n  directly instead of the descriptions folder",
            "title": "Resource Packages"
        },
        {
            "location": "/rpkg/#resource-packages",
            "text": "Resource packages allow you to more efficiently manage plugin resource files\nand translations by merging all information into a single file. Resource\npackages have the  .rpkg  suffix and are converted to real Cinema 4D resource\nfiles by using the  c4ddev rpkg  command.  ResourcePackage\n# Basic Attributes\nPRIM_CUBE_LENGTH: 1001\n  us: Size\n  de: Gr\u00f6\u00dfe\nPRIM_CUBE_SEGMENTS: 1002\n  us: Segments\n  de: Segmente\n# A symbol without ID is placed only into the Stringtable\nSOME_SEPARATOR_NAME:\n  us: A Separator\n  de: Ein Separator\n# More symbols to follow ...  A file called  c4d_symbols.rpkg  will be handled special and generate the respective c4d_symbols.h  and  c4d_strings.str  files.  $ c4ddev.py rpkg res/c4d_symbols.rpkg res/Ocube.rpkg\nWriting c4d_symbols.h ...\nWriting strings_de/c4d_strings.str ...\nWriting strings_us/c4d_strings.str ...\nWriting description/Ocube.h ...\nWriting strings_de/description/Ocube.str ...\nWriting strings_us/description/Ocube.str ...",
            "title": "Resource Packages"
        },
        {
            "location": "/rpkg/#rpkg-format-information",
            "text": "The  ResourcePackage  line is mandatory and must be the first line in the file  Comments begin with a number sign ( # ) and continue until the end of the line  Assigning a fixed ID number to a symbol is mandatory  Special characters in the localization are allowed (use  \\n  for a newline and  \\t  for a tab)  If the file is named  c4d_symbols.rpkg , it will automatically be created in the res folder\n  directly instead of the descriptions folder",
            "title": ".rpkg Format Information"
        },
        {
            "location": "/contents/",
            "text": "Contents\n\n\nThird-party Modules\n\n\nWhen \nc4ddev\n is installed to Cinema 4D, it provides some useful modules\nout-of-the-box. These are intended to be used for scripting only! Plugins\nshould never rely on these modules to be available and instead distribute\nthem with the plugin using \nc4ddev pypkg\n and\n\nlocalimport\n.\n\n\n\n\nrequests\n\n\npy-require\n\n\n\n\nRequire Modules\n\n\nThese modules must be loaded using the \nrequire\n module.\n\n\n\n\nc4ddev\n\n\nlocalimport\n\n\n\n\nCinema 4D Plugins\n\n\nc4ddev comes with a bunch of useful plugins for Cinema 4D. These are loaded\nfrom \n.py\n files in the plugin\u2019s \next/\n directory.\n\n\nUnicode Escape Tool\n\n\nString resources require special characters to be escaped with unicode\nescape sequences in the format of \n\\UXXXX\n. The \u201cUnicode Escape Tool\u201d\ncan handle this for you. Just enter or paste the stringtable or text\nand you can convert it.\n\n\n\n\nPyShader\n\n\nThis simple Cinema 4D plugin allows you to write shaders on-the-fly or\nprototype for a native shader plugin.\n\n\n\n\nPyDrawHelper\n\n\nThis is a very old plugin that I wrote in 2011. It\u2019s a Python Object in which you can\nwrite Python code and that code is executed during the \nDraw()\n function. Very useful\nfor testing and prototyping.\n\n\n\n\nNote\n: The code also looks like it was written back in 2011! I will update it\nsoon to bring it up to speed with my current standards.\n\n\n\n\n\n\nPython Batch Compiler\n\n\nThis simple command lets you select a directory and it will compile all\nPython \n*.py\n files it can find to \n*.pyc\n files using the built-in\nCinema 4D Python Interpreter. This is useful to avoid Python magic\nnumber issues if you try to use \npython -m compileall\n from the command\nline since Cinema 4D uses \nPython 2.6\n and you may have a different\nversion installed.\n\n\nEgg Maker\n\n\nCreate a Python \n*.egg\n from a directory. Optionally, it will include\nnon-Python files and prefer compiled Python over source files.",
            "title": "Contents"
        },
        {
            "location": "/contents/#contents",
            "text": "",
            "title": "Contents"
        },
        {
            "location": "/contents/#third-party-modules",
            "text": "When  c4ddev  is installed to Cinema 4D, it provides some useful modules\nout-of-the-box. These are intended to be used for scripting only! Plugins\nshould never rely on these modules to be available and instead distribute\nthem with the plugin using  c4ddev pypkg  and localimport .   requests  py-require",
            "title": "Third-party Modules"
        },
        {
            "location": "/contents/#require-modules",
            "text": "These modules must be loaded using the  require  module.   c4ddev  localimport",
            "title": "Require Modules"
        },
        {
            "location": "/contents/#cinema-4d-plugins",
            "text": "c4ddev comes with a bunch of useful plugins for Cinema 4D. These are loaded\nfrom  .py  files in the plugin\u2019s  ext/  directory.",
            "title": "Cinema 4D Plugins"
        },
        {
            "location": "/contents/#unicode-escape-tool",
            "text": "String resources require special characters to be escaped with unicode\nescape sequences in the format of  \\UXXXX . The \u201cUnicode Escape Tool\u201d\ncan handle this for you. Just enter or paste the stringtable or text\nand you can convert it.",
            "title": "Unicode Escape Tool"
        },
        {
            "location": "/contents/#pyshader",
            "text": "This simple Cinema 4D plugin allows you to write shaders on-the-fly or\nprototype for a native shader plugin.",
            "title": "PyShader"
        },
        {
            "location": "/contents/#pydrawhelper",
            "text": "This is a very old plugin that I wrote in 2011. It\u2019s a Python Object in which you can\nwrite Python code and that code is executed during the  Draw()  function. Very useful\nfor testing and prototyping.   Note : The code also looks like it was written back in 2011! I will update it\nsoon to bring it up to speed with my current standards.",
            "title": "PyDrawHelper"
        },
        {
            "location": "/contents/#python-batch-compiler",
            "text": "This simple command lets you select a directory and it will compile all\nPython  *.py  files it can find to  *.pyc  files using the built-in\nCinema 4D Python Interpreter. This is useful to avoid Python magic\nnumber issues if you try to use  python -m compileall  from the command\nline since Cinema 4D uses  Python 2.6  and you may have a different\nversion installed.",
            "title": "Python Batch Compiler"
        },
        {
            "location": "/contents/#egg-maker",
            "text": "Create a Python  *.egg  from a directory. Optionally, it will include\nnon-Python files and prefer compiled Python over source files.",
            "title": "Egg Maker"
        },
        {
            "location": "/api/",
            "text": "The \nc4ddev\n API\n\n\nThe \nc4ddev\n API provides some utilities that are especially useful for\nscripting and prototyping in Cinema 4D. All contents of the \nc4ddev\n library\nmust be loaded with the \nrequire\n module (which is delivered with \nc4ddev\n,\nsee the \nContents\n page for more information).\n\n\nimport require\nlocalimport = require('c4ddev/scripting/localimport')\n# This is a version of localimport that is tuned to work from inside any\n# scripting context in Cinema 4D (Tag, Object, XPresso Node).\n\nwith localimport(doc):\n  import twitter\n\ndef main():\n  # TODO: Some clever example\n\n\n\n\nNamespaces\n\n\n\n\nc4ddev\n\n\nc4ddev/pypkg\n\n\nc4ddev/resource\n\n\nc4ddev/scripting/localimport\n \u2013 localimport tuned for Cinema 4D scripting\n\n\nc4ddev/utils\n \u2013 utilities that are used by the c4ddev extensions (in \next/\n)",
            "title": "API Documentation"
        },
        {
            "location": "/api/#the-c4ddev-api",
            "text": "The  c4ddev  API provides some utilities that are especially useful for\nscripting and prototyping in Cinema 4D. All contents of the  c4ddev  library\nmust be loaded with the  require  module (which is delivered with  c4ddev ,\nsee the  Contents  page for more information).  import require\nlocalimport = require('c4ddev/scripting/localimport')\n# This is a version of localimport that is tuned to work from inside any\n# scripting context in Cinema 4D (Tag, Object, XPresso Node).\n\nwith localimport(doc):\n  import twitter\n\ndef main():\n  # TODO: Some clever example",
            "title": "The c4ddev API"
        },
        {
            "location": "/api/#namespaces",
            "text": "c4ddev  c4ddev/pypkg  c4ddev/resource  c4ddev/scripting/localimport  \u2013 localimport tuned for Cinema 4D scripting  c4ddev/utils  \u2013 utilities that are used by the c4ddev extensions (in  ext/ )",
            "title": "Namespaces"
        },
        {
            "location": "/localimport/",
            "text": "Localimport\n\n\nThis is not directly a feature of \nc4ddev\n, but it is something that needs to\nbe considered by every Python Plugin author. When you import modules from your\nPython Plugin\u2019s directory, you should \nnever\n do it the naive way (exceptions\napply*)!\n\n\nimport os, sys\nsys.path.append(os.path.join(os.path.dirname(__file__), 'lib'))\nimport some_module\n\n\n\n\n\n\nDanger\n\n\nUsing the naive approach shown above is dangerous and can lead to\nincompatibilties between plugins.\n\n\n\n\nInstead, it is highly recommended to make sure that the global importer state\nstays clean and unaware of your additional modules. While you could code that\nall yourself, someone already racked their brain over this. The\n\nlocalimport\n module provides a context-manager that allows you to safely\nimport modules from a directory, automatically cleaning up afterwards and\nreverting the global Python data (\nsys.modules\n, \nsys.path\n, etc.) to its\noriginal state.\n\n\nwith localimport(['lib']) as _importer:\n  # This line would not be necessary if everyone would use localimport,\n  # but since we can not garuantee that...\n  _importer.disable(['some_module'])\n\n  import some_module\n  assert 'some_module' in sys.modules\n\nassert 'some_module' not in sys.modules\n\n\n\n\nMinified Version\n\n\nNow of course, \nlocalimport\n is, in itself, also a Python module. Instead\nof actually loading the class from a Python module, it is recommended to include\nthe actual source code at the top of your Python plugin. Below is a minified\nversion of \nlocalimport-v1.5\n. Other (and eventually newer) versions are\navailable \nhere\n.\n\n\n# localimport-v1.5_b64_lw=99\nexec(\"\"\"import base64 as b, zlib as z; s={}; blob=b\"\\\n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\"\nexec(z.decompress(b.b64decode(blob)), s)\nlocalimport=s[\"localimport\"]; del blob, b, z, s;\"\"\")\n\n\n\n\nExceptions\n\n\nIf your Python Plugin provides a unique API that is intended to be exposed to\nother plugins or scripts, it is a valid method of adding that module to the\nglobal \nsys.path\n.\n\n\nFor example, the \nPV Render Queue\n plugin does exactly that.\n\n\nExtended Example\n\n\nIf you\u2019re using \nc4ddev pypkg\n to package additional Python\nmodules, it is common to have a \ndevel/\n directory with all the dependencies.\nIn development mode, you can make \nlocalimport\n load the dependencies from\nthat directory, and otherwise load it from the Python Egg generated with\n\nc4ddev pypkg\n.\n\n\nif _debug:\n  _importer = localimport(['devel'])\nelse:\n  _importer = localimport('res/modules{0}/cloudui.egg'.format(sys.version[:3]))\n\nwith _importer:\n    _importer.disable(['res', 'c4dtools', 'cloudui', 'res', 'nr'])\n\n    import res\n    import c4dtools\n    import cloudui\n    import nr.concurrency\n\n    from c4dtools.gui import handle_file_select\n    from c4dtools.utils import load_bitmap\n    from cloudui.utils import (\n        get_frame_range, check_region, iter_rdata, calc_tile_size,\n        fit_tile_count, Point\n    )\n\n\n\n\nNote that in most cases, the \ndevel/\n directory will not contain just the\nsource code of the modules that you want to use, but the complete repository\n(eg. when you\u2019re using Git submodules, which I highly recommend).\n\n\ndevel/\n  requests/\n    requests/\n    README.md\n    setup.py\n    ...\n\n\n\n\nIn order to have the correct \nsys.path\n setup when loading modules from the\n\ndevel/\n directory, you can place a \n.pth\n file into that directory.\n\n\ndevel/\n  devel.pth       <<\n  requests/\n    requests/\n    README.md\n    setup.py\n  ...\n\n\n\n\nThis file can list an additional include directory per line. So for the above\nexample, in order to be able to import the \nrequests\n module in development mode,\nwe simply add the following line to the \ndevel.pth\n file.\n\n\nrequests/requests\n\n\n\n\n\n\nNote\n\n\nYou don\u2019t need this file in release mode when your third-party modules\nare packaged with \nc4ddev pypkg\n.",
            "title": "Localimport"
        },
        {
            "location": "/localimport/#localimport",
            "text": "This is not directly a feature of  c4ddev , but it is something that needs to\nbe considered by every Python Plugin author. When you import modules from your\nPython Plugin\u2019s directory, you should  never  do it the naive way (exceptions\napply*)!  import os, sys\nsys.path.append(os.path.join(os.path.dirname(__file__), 'lib'))\nimport some_module   Danger  Using the naive approach shown above is dangerous and can lead to\nincompatibilties between plugins.   Instead, it is highly recommended to make sure that the global importer state\nstays clean and unaware of your additional modules. While you could code that\nall yourself, someone already racked their brain over this. The localimport  module provides a context-manager that allows you to safely\nimport modules from a directory, automatically cleaning up afterwards and\nreverting the global Python data ( sys.modules ,  sys.path , etc.) to its\noriginal state.  with localimport(['lib']) as _importer:\n  # This line would not be necessary if everyone would use localimport,\n  # but since we can not garuantee that...\n  _importer.disable(['some_module'])\n\n  import some_module\n  assert 'some_module' in sys.modules\n\nassert 'some_module' not in sys.modules",
            "title": "Localimport"
        },
        {
            "location": "/localimport/#minified-version",
            "text": "Now of course,  localimport  is, in itself, also a Python module. Instead\nof actually loading the class from a Python module, it is recommended to include\nthe actual source code at the top of your Python plugin. Below is a minified\nversion of  localimport-v1.5 . Other (and eventually newer) versions are\navailable  here .  # localimport-v1.5_b64_lw=99\nexec(\"\"\"import base64 as b, zlib as z; s={}; blob=b\"\\\n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\"\nexec(z.decompress(b.b64decode(blob)), s)\nlocalimport=s[\"localimport\"]; del blob, b, z, s;\"\"\")",
            "title": "Minified Version"
        },
        {
            "location": "/localimport/#exceptions",
            "text": "If your Python Plugin provides a unique API that is intended to be exposed to\nother plugins or scripts, it is a valid method of adding that module to the\nglobal  sys.path .  For example, the  PV Render Queue  plugin does exactly that.",
            "title": "Exceptions"
        },
        {
            "location": "/localimport/#extended-example",
            "text": "If you\u2019re using  c4ddev pypkg  to package additional Python\nmodules, it is common to have a  devel/  directory with all the dependencies.\nIn development mode, you can make  localimport  load the dependencies from\nthat directory, and otherwise load it from the Python Egg generated with c4ddev pypkg .  if _debug:\n  _importer = localimport(['devel'])\nelse:\n  _importer = localimport('res/modules{0}/cloudui.egg'.format(sys.version[:3]))\n\nwith _importer:\n    _importer.disable(['res', 'c4dtools', 'cloudui', 'res', 'nr'])\n\n    import res\n    import c4dtools\n    import cloudui\n    import nr.concurrency\n\n    from c4dtools.gui import handle_file_select\n    from c4dtools.utils import load_bitmap\n    from cloudui.utils import (\n        get_frame_range, check_region, iter_rdata, calc_tile_size,\n        fit_tile_count, Point\n    )  Note that in most cases, the  devel/  directory will not contain just the\nsource code of the modules that you want to use, but the complete repository\n(eg. when you\u2019re using Git submodules, which I highly recommend).  devel/\n  requests/\n    requests/\n    README.md\n    setup.py\n    ...  In order to have the correct  sys.path  setup when loading modules from the devel/  directory, you can place a  .pth  file into that directory.  devel/\n  devel.pth       <<\n  requests/\n    requests/\n    README.md\n    setup.py\n  ...  This file can list an additional include directory per line. So for the above\nexample, in order to be able to import the  requests  module in development mode,\nwe simply add the following line to the  devel.pth  file.  requests/requests   Note  You don\u2019t need this file in release mode when your third-party modules\nare packaged with  c4ddev pypkg .",
            "title": "Extended Example"
        },
        {
            "location": "/cpp/resources/",
            "text": "C++ Resources\n\n\nThis page contains a list of resources about Cinema 4D C++ plugin development\nand useful links.\n\n\nPosts\n\n\n\n\nDrawing Text in the Viewport\n\n\nSaving EXR\n\n\nExposing C++ functionality to Python\n\n\nViewport HUD API\n\n\nSaving Custom GUI layouts\n\n\n\n\nTools\n\n\n\n\ncraftr:NiklasRosenstein.maxon.c4d\n\n  \u2013 Build Cinema 4D Plugins on Windows, macOS and Linux",
            "title": "Resources"
        },
        {
            "location": "/cpp/resources/#c-resources",
            "text": "This page contains a list of resources about Cinema 4D C++ plugin development\nand useful links.",
            "title": "C++ Resources"
        },
        {
            "location": "/cpp/resources/#posts",
            "text": "Drawing Text in the Viewport  Saving EXR  Exposing C++ functionality to Python  Viewport HUD API  Saving Custom GUI layouts",
            "title": "Posts"
        },
        {
            "location": "/cpp/resources/#tools",
            "text": "craftr:NiklasRosenstein.maxon.c4d \n  \u2013 Build Cinema 4D Plugins on Windows, macOS and Linux",
            "title": "Tools"
        },
        {
            "location": "/cpp/snippets/",
            "text": "Snippets\n\n\nHide Dialog Menubar\n\n\nThere is a non-member function available in the SDK that can be accessed\nthrough the \nC4DOS\n to add special gadgets to the dialog, and it appears\nthat the state \u201cno menubar\u201d is also represented internally as a dialog\ngadgets.\n\n\ninline Bool AddGadget(GeDialog* dlg, Int32 gadget_type) {\n  String const name;\n  BaseContainer const bc;\n  return C4DOS.Cd->AddGadget(dlg->Get(), gadget_type, 0, &name, 0, 0, 0, 0, &bc, nullptr);\n}\n\n\n\n\nThe gadget to remove the dialog menubar is \nDIALOG_NOMENUBAR\n. Be aware\nwhen adding this gadget: Adding it inside \nCreateLayout()\n won\u2019t work\nand calling it afterwards will crash C4D. You can call the function\nin the dialog\u2019s constructor though!\n\n\nclass MyDialog : public GeDialog() {\npublic:\n  MyDialog() : GeDialog() { AddGadget(this, DIALOG_NOMENUBAR); }\n};",
            "title": "Snippets"
        },
        {
            "location": "/cpp/snippets/#snippets",
            "text": "",
            "title": "Snippets"
        },
        {
            "location": "/cpp/snippets/#hide-dialog-menubar",
            "text": "There is a non-member function available in the SDK that can be accessed\nthrough the  C4DOS  to add special gadgets to the dialog, and it appears\nthat the state \u201cno menubar\u201d is also represented internally as a dialog\ngadgets.  inline Bool AddGadget(GeDialog* dlg, Int32 gadget_type) {\n  String const name;\n  BaseContainer const bc;\n  return C4DOS.Cd->AddGadget(dlg->Get(), gadget_type, 0, &name, 0, 0, 0, 0, &bc, nullptr);\n}  The gadget to remove the dialog menubar is  DIALOG_NOMENUBAR . Be aware\nwhen adding this gadget: Adding it inside  CreateLayout()  won\u2019t work\nand calling it afterwards will crash C4D. You can call the function\nin the dialog\u2019s constructor though!  class MyDialog : public GeDialog() {\npublic:\n  MyDialog() : GeDialog() { AddGadget(this, DIALOG_NOMENUBAR); }\n};",
            "title": "Hide Dialog Menubar"
        },
        {
            "location": "/python/asyncgui/",
            "text": "Async GUI\n\n\nJust like in many other GUI frameworks and applications, you can not operate\nwith the GUI layer from any but the main thread in Cinema 4D. If you do\nprocessing in a separate thread and need to update some progress bar in your\ndialog, you have to use the message queue in Cinema 4D, via \nc4d.EventAdd()\n\nor \nc4d.SpecialEventAdd()\n.\n\n\nThe \nnr.concurrency\n module provides a lot of utility to work with\nbackground procedures inside of (but not limited to) Cinema 4D. It provides a\n\nSynchronizable\n base-class,an event-notification system, futures and more!\n\n\n\n\nNote\n\n\nBe sure to read the information on \nThird Party Modules\n first.\n\n\n\n\nwith localimport('res/modules'):\n  from nr import concurrency\n\nevents = concurrency.EventQueue()\n# Allow dispose of old events of the same type, so we don't get to process\n# multiple events of the same type with different data, but only the most recent.\nevents.new_event_type('progress-update', mergable=True)\nevents.new_event_type('status-update', mergable=True)\n\nclass MyDialog(c4d.gui.GeDialog):\n\n  def __init__(self):\n    super(MyDialog, self).__init__()\n\n  def on_event(self, event, data):\n    # Called from the main thread!\n    if event == 'progress-update':\n      pass\n    elif event == 'status-update':\n      pass\n\n  def CoreMessage(self, msg_type, bc):\n    if msg_type == c4d.EVMSG_CHANGE:\n      for event in events.pop_events():\n        self.on_event(event.type, event.data)\n    return super(MyDialog, self).CoreMessage(msg_type, bc)\n\n\ndef some_function_from_a_thread():\n  # ...\n  events.add_event('progress-update', {'progress': 50.0})",
            "title": "Async GUI"
        },
        {
            "location": "/python/asyncgui/#async-gui",
            "text": "Just like in many other GUI frameworks and applications, you can not operate\nwith the GUI layer from any but the main thread in Cinema 4D. If you do\nprocessing in a separate thread and need to update some progress bar in your\ndialog, you have to use the message queue in Cinema 4D, via  c4d.EventAdd() \nor  c4d.SpecialEventAdd() .  The  nr.concurrency  module provides a lot of utility to work with\nbackground procedures inside of (but not limited to) Cinema 4D. It provides a Synchronizable  base-class,an event-notification system, futures and more!   Note  Be sure to read the information on  Third Party Modules  first.   with localimport('res/modules'):\n  from nr import concurrency\n\nevents = concurrency.EventQueue()\n# Allow dispose of old events of the same type, so we don't get to process\n# multiple events of the same type with different data, but only the most recent.\nevents.new_event_type('progress-update', mergable=True)\nevents.new_event_type('status-update', mergable=True)\n\nclass MyDialog(c4d.gui.GeDialog):\n\n  def __init__(self):\n    super(MyDialog, self).__init__()\n\n  def on_event(self, event, data):\n    # Called from the main thread!\n    if event == 'progress-update':\n      pass\n    elif event == 'status-update':\n      pass\n\n  def CoreMessage(self, msg_type, bc):\n    if msg_type == c4d.EVMSG_CHANGE:\n      for event in events.pop_events():\n        self.on_event(event.type, event.data)\n    return super(MyDialog, self).CoreMessage(msg_type, bc)\n\n\ndef some_function_from_a_thread():\n  # ...\n  events.add_event('progress-update', {'progress': 50.0})",
            "title": "Async GUI"
        },
        {
            "location": "/python/scripts/",
            "text": "Python Scripts & Snippets\n\n\nThis page links to a number of useful Cinema 4D scripts.\n\n\nSnippets\n\n\n\n\nTreeViewCustomGui Example\n\n\ncopy_preset_texture()\n\n\n\n\nScripts\n\n\n\n\nCinema 4D Plugin Skeleton\n\n  \u2013 Skeleton to kick off Cinema 4D Python plugins from.\n\n\nSet as Startup Scene\n\n  \u2013  Script to set the current scene as the startup scene.",
            "title": "Scripts & Snippets"
        },
        {
            "location": "/python/scripts/#python-scripts-snippets",
            "text": "This page links to a number of useful Cinema 4D scripts.",
            "title": "Python Scripts &amp; Snippets"
        },
        {
            "location": "/python/scripts/#snippets",
            "text": "TreeViewCustomGui Example  copy_preset_texture()",
            "title": "Snippets"
        },
        {
            "location": "/python/scripts/#scripts",
            "text": "Cinema 4D Plugin Skeleton \n  \u2013 Skeleton to kick off Cinema 4D Python plugins from.  Set as Startup Scene \n  \u2013  Script to set the current scene as the startup scene.",
            "title": "Scripts"
        }
    ]
}